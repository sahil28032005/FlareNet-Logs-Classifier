# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ad_oHnzPij7-HQAYKYPMSUpvd00f03X2
"""

from google.colab import files
uploaded = files.upload()  # This will open a file selection dialog.

# prompt: read my cs file named log_events_with_headers.csv

import pandas as pd
from google.colab import files
# Assuming the file is named 'log_events_with_headers.csv'
try:
  df = pd.read_csv('log_events_with_headers.csv')
  display(df.head())   # Display the first 5 rows of the DataFrame

  #checking quality of dataset
  display(df.isnull().sum())
except FileNotFoundError:
  print("Error: 'log_events_with_headers.csv' not found.")
except pd.errors.ParserError:
  print("Error: Could not parse the CSV file. Check the file format.")
except Exception as e:
  print(f"An unexpected error occurred: {e}")

print(df.dtypes)

df['timestamp'] = pd.to_datetime(df['timestamp'], errors='coerce')  # Use 'coerce' to handle invalid parsing
df['file_size'] = pd.to_numeric(df['file_size'], errors='coerce')
df['file_size_in_bytes'] = pd.to_numeric(df['file_size_in_bytes'], errors='coerce')
df['time_taken'] = pd.to_numeric(df['time_taken'], errors='coerce')
df['log_level'] = df['log_level'].astype('category')
df['deployment_success'] = df.groupby('deployment_id')['log_level'].transform(lambda x: 1 if 'success' in x.values else 0)
# Drop unnecessary columns
df.drop(columns=['event_id', 'file_name'], inplace=True)
df.fillna({
    'file_size': df['file_size'].mean(),
    'file_size_in_bytes': df['file_size_in_bytes'].mean(),
    'time_taken': df['time_taken'].mean(),
    'log_message': 'Unknown'
}, inplace=True)

# //event id an =d file name can be emovde  as they are unnecessary for data analysis

# //normalize data for fast processing and improve efficiency

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
df[['file_size', 'file_size_in_bytes', 'time_taken']] = scaler.fit_transform(df[['file_size', 'file_size_in_bytes', 'time_taken']])



display(df.head(100))   # Display the first 5 rows of the DataFrame

